{
  "load instruction context": false,
  "localisation des classes où tu pourrais travailler": {
    "description": "cette section n'est qu'à titre indicatif, ça te donne une idée de où commencer à investiguer mais tu peux aussi chercher ailleurs dans le code",
    "détails": {
      "module de travail": "",
      "classe de travail principal": "",
      "classes de travail supplémentaires": []
    }
  },
  "tache": {
    "description": "",
    "section réservée à Claude":{}
  }
}

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a Spring Boot microservice for device management with a modular Maven architecture. The system manages IoT devices and gateways through various connector modules that interface with external services.

## Architecture

**Multi-Module Structure**: The project uses Maven modules with specific responsibilities:
- `device-ws`: Main web service and REST API endpoints
- `device-common`: Shared utilities, exceptions, constants, and JSON serialization
- `device-*-connector`: External service connectors (AWS, ThingsBoard, Crow, Sercomm, Meari, etc.)
- `device-model-ws`: Data transfer objects and domain models

**Key External Integrations**:
- **ThingsBoard**: IoT platform for device management (`device-tb-connector`, `device-tbfacade-connector`)
- **Crow**: Security/alarm system integration (`device-crow-connector`)
- **AWS S3**: File storage (`device-aws-connector`)
- **Consul**: Configuration management (via Spring Cloud Consul)
- **Kafka**: Event streaming for data enrichment and telemetry
- **Keycloak**: Authentication services

**Main Application**: `com.protectline.device.ws.DeviceApplication` with Spring Boot auto-configuration, AWS context exclusions, and component scanning across `com.protectline.*` packages.

## Build and Development Commands

**Build**: Tests are currently disabled due to issues
```bash
mvn clean install -DskipTests
```

**Run locally**: 
```bash
cd device-ws
mvn spring-boot:run
```

**Run in IDE**: Execute `com.protectline.device.ws.DeviceApplication`

**Verify running**: Access Swagger UI at `http://localhost:8000/swagger-ui.html`

**Local Configuration**: Apply the `local_config.patch` to configure Consul connection for local development. Update the token with one from "lockself".

**Testing**: Individual module tests can be run with `mvn test` in specific module directories. Integration tests use Spring test slices and MockWebServer for external service mocking.

## Development Notes

**Java Version**: Java 11 (configured in Maven compiler plugin)

**Spring Boot Version**: 2.2.4.RELEASE with Spring Cloud Consul integration

**Configuration**: Uses Consul for centralized configuration management. Bootstrap configuration expects `CONSUL_URL` and `TOKEN` environment variables.

**Exception Handling**: Centralized exception hierarchy in `device-common` with standardized error codes (DEVICE-xxx format) and localized messages.

**Testing Patterns**: Each connector module has comprehensive test resources with JSON fixtures organized by service type (crow/, thingsboard/, meari/, etc.). Tests use Spring Boot test slices and WireMock for HTTP service mocking.

**AWS Local Development**: For local AWS testing, uncomment code in `AwsConnectorImpl.existFile()` method as referenced in README.

## Global instruction for Claude Code

- After receive a prompt, always provivde clear, concise explanations of what about to be done before doing anything ; then, after user confirm and aknowledge, proceed with the task.
- never execute script (bash, python etc.) without asking me 
